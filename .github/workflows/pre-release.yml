name: Pre-release

on:
  push:
    tags:
      - 'v*.*.*-beta-*'

jobs:
  build-binaries:
    name: Build Binary - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact-name: linux-x86_64
            binary-extension: ''
            ghc: "9.6.7"
            cabal: "3.12"
          - os: macos-latest
            artifact-name: macos-x86_64
            binary-extension: ''
            ghc: "9.6.7"
            cabal: "3.12"
          - os: windows-latest
            artifact-name: windows-x86_64
            binary-extension: '.exe'
            ghc: "9.6.7"
            cabal: "3.12"

    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies (NASM + GCC)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y nasm gcc

    - name: Setup Haskell
      uses: haskell-actions/setup@v2
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}

    - name: Cache cabal store
      uses: actions/cache@v4
      with:
        path: |
          ~/.cabal/store
          ~/.cabal/packages
          dist-newstyle
        key: ${{ runner.os }}-cabal-release-${{ hashFiles('**/*.cabal', '**/cabal.project') }}
        restore-keys: |
          ${{ runner.os }}-cabal-release-

    - name: Update cabal
      run: cabal update

    - name: Build interpreter
      run: cabal build exe:brainfuchs

    - name: Build compiler
      if: matrix.os == 'ubuntu-latest'
      run: cabal build exe:bfhsc

    - name: Run tests
      run: cabal test --test-show-details=direct

    - name: Create release directory
      run: mkdir -p release

    - name: Get compiler binary name
      if: matrix.os == 'ubuntu-latest'
      id: get-compiler-binary
      shell: bash
      run: |
        BINARY_PATH=$(cabal list-bin exe:bfhsc)
        echo "binary-path=$BINARY_PATH" >> $GITHUB_OUTPUT
        BINARY_NAME=$(basename "$BINARY_PATH")
        echo "binary-name=$BINARY_NAME" >> $GITHUB_OUTPUT

    - name: Strip compiler binary (Unix)
      if: matrix.os == 'ubuntu-latest'
      run: strip ${{ steps.get-compiler-binary.outputs.binary-path }}

    - name: Copy compiler binary to release directory
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        TAG="${{ github.ref_name }}"
        BIN_PATH="${{ steps.get-compiler-binary.outputs.binary-path }}"
        # Substitui '\' por '/' para normalização de caminhos no Windows usando bash shell.
        BIN_PATH=$(echo "$BIN_PATH" | sed 's#\\#/#g')

        cp "$BIN_PATH" "release/bfhsc-$TAG-${{ matrix.artifact-name }}${{ matrix.binary-extension }}"

    - name: Get interpreter binary name
      id: get-binary
      shell: bash
      run: |
        BINARY_PATH=$(cabal list-bin exe:brainfuchs)
        echo "binary-path=$BINARY_PATH" >> $GITHUB_OUTPUT
        BINARY_NAME=$(basename "$BINARY_PATH")
        echo "binary-name=$BINARY_NAME" >> $GITHUB_OUTPUT

    - name: Strip interpreter binary (Unix)
      if: matrix.os != 'windows-latest'
      run: strip ${{ steps.get-binary.outputs.binary-path }}

    - name: Copy interpreter binary to release directory
      shell: bash
      run: |
        TAG="${{ github.ref_name }}"
        BIN_PATH="${{ steps.get-binary.outputs.binary-path }}"
        # Substitui '\' por '/' para normalização de caminhos no Windows usando bash shell.
        BIN_PATH=$(echo "$BIN_PATH" | sed 's#\\#/#g')

        cp "$BIN_PATH" "release/brainfuchs-$TAG-${{ matrix.artifact-name }}${{ matrix.binary-extension }}"

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        TAG="${{ github.ref_name }}"
        cd release
        tar -czf brainfuchs-$TAG-${{ matrix.artifact-name }}.tar.gz *

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        TAG="${{ github.ref_name }}"
        cd release
        7z a brainfuchs-$TAG-${{ matrix.artifact-name }}.zip *

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.artifact-name }}
        path: release/*

  create-pre-release:
    name: Create Pre-release
    needs: build-binaries
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: binaries

    - name: Display structure of downloaded files
      run: ls -R binaries

    - name: Extract version
      id: version
      run: |
        TAG="${{ github.ref_name }}"
        # Remove prefixo 'v'
        TAG="${TAG#v}"
        # Remove último '-' e o sufixo
        VERSION="${TAG%-*}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Extract changelog
      id: changelog
      run: |
        if [ ! -f CHANGELOG.md ]; then
          # Fallback
          RELEASE_NOTE="Versão beta para testes."
          echo  "release_note=$RELEASE_NOTE" >> "$GITHUB_OUTPUT"
          exit 0
        fi

        RELEASE_NOTE=$(awk -v version="Unreleased" '
          BEGIN { print_section=0 }
          /^## / {
            if (print_section) exit
            if ($0 ~ version) {
              print_section=1
              next
            }
          }
          print_section { print }
        ' CHANGELOG.md);

        echo "release_note<<EOF" >> "$GITHUB_OUTPUT"
        echo "$RELEASE_NOTE" >> "$GITHUB_OUTPUT"
        echo "EOF" >> "$GITHUB_OUTPUT"

        echo "Pre-Release notes:"
        echo "$RELEASE_NOTE"

    - name: Create Pre-release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Pre-release ${{ github.ref_name }}
        target_commitish: develop
        body: |
          Pré-lançamento

          **Versão:** ${{ steps.version.outputs.version }}
          **Commit:** ${{ github.sha }}
          **Branch:** develop

          ${{ steps.changelog.outputs.release_note }}

          Veja [CHANGELOG.md](https://github.com/igorMSoares/brainfuchs/blob/${{ github.ref_name }}/CHANGELOG.md)  para mais detalhes.
        draft: false
        prerelease: true
        files: |
          binaries/binary-linux-x86_64/*
          binaries/binary-macos-x86_64/*
          binaries/binary-windows-x86_64/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

